
test_LCD_FMC_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800367c  0800367c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800367c  0800367c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800367c  0800367c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  24000010  08003694  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000108  08003694  00020108  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183b8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000295c  00000000  00000000  000383f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  0003ad58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0003b850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003754c  00000000  00000000  0003c240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd44  00000000  00000000  0007378c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015be32  00000000  00000000  000804d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dc302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  001dc380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003654 	.word	0x08003654

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003654 	.word	0x08003654

080002d8 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]
 80002ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80002f0:	4b28      	ldr	r3, [pc, #160]	; (8000394 <MX_FMC_Init+0xbc>)
 80002f2:	4a29      	ldr	r2, [pc, #164]	; (8000398 <MX_FMC_Init+0xc0>)
 80002f4:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80002f6:	4b27      	ldr	r3, [pc, #156]	; (8000394 <MX_FMC_Init+0xbc>)
 80002f8:	4a28      	ldr	r2, [pc, #160]	; (800039c <MX_FMC_Init+0xc4>)
 80002fa:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <MX_FMC_Init+0xbc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000302:	4b24      	ldr	r3, [pc, #144]	; (8000394 <MX_FMC_Init+0xbc>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_FMC_Init+0xbc>)
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <MX_FMC_Init+0xbc>)
 8000310:	2210      	movs	r2, #16
 8000312:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_FMC_Init+0xbc>)
 8000316:	2200      	movs	r2, #0
 8000318:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800031a:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_FMC_Init+0xbc>)
 800031c:	2200      	movs	r2, #0
 800031e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <MX_FMC_Init+0xbc>)
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000326:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_FMC_Init+0xbc>)
 8000328:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800032c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <MX_FMC_Init+0xbc>)
 8000330:	2200      	movs	r2, #0
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_FMC_Init+0xbc>)
 8000336:	2200      	movs	r2, #0
 8000338:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_FMC_Init+0xbc>)
 800033c:	2200      	movs	r2, #0
 800033e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_FMC_Init+0xbc>)
 8000342:	2200      	movs	r2, #0
 8000344:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <MX_FMC_Init+0xbc>)
 8000348:	2200      	movs	r2, #0
 800034a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_FMC_Init+0xbc>)
 800034e:	2200      	movs	r2, #0
 8000350:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <MX_FMC_Init+0xbc>)
 8000354:	2200      	movs	r2, #0
 8000356:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000358:	230f      	movs	r3, #15
 800035a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800035c:	230f      	movs	r3, #15
 800035e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000360:	23ff      	movs	r3, #255	; 0xff
 8000362:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000364:	230f      	movs	r3, #15
 8000366:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000368:	2310      	movs	r3, #16
 800036a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800036c:	2311      	movs	r3, #17
 800036e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000370:	2300      	movs	r3, #0
 8000372:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	4619      	mov	r1, r3
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <MX_FMC_Init+0xbc>)
 800037c:	f002 ffd6 	bl	800332c <HAL_SRAM_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8000386:	f000 fa0f 	bl	80007a8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	24000030 	.word	0x24000030
 8000398:	52004000 	.word	0x52004000
 800039c:	52004104 	.word	0x52004104

080003a0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80003b4:	4b24      	ldr	r3, [pc, #144]	; (8000448 <HAL_FMC_MspInit+0xa8>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d141      	bne.n	8000440 <HAL_FMC_MspInit+0xa0>
    return;
  }
  FMC_Initialized = 1;
 80003bc:	4b22      	ldr	r3, [pc, #136]	; (8000448 <HAL_FMC_MspInit+0xa8>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <HAL_FMC_MspInit+0xac>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80003c8:	4a20      	ldr	r2, [pc, #128]	; (800044c <HAL_FMC_MspInit+0xac>)
 80003ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ce:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80003d2:	4b1e      	ldr	r3, [pc, #120]	; (800044c <HAL_FMC_MspInit+0xac>)
 80003d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80003d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80003e0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80003e4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e6:	2302      	movs	r3, #2
 80003e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003ee:	2303      	movs	r3, #3
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80003f2:	230c      	movs	r3, #12
 80003f4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	4815      	ldr	r0, [pc, #84]	; (8000450 <HAL_FMC_MspInit+0xb0>)
 80003fc:	f000 fcf4 	bl	8000de8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000400:	f64c 7333 	movw	r3, #53043	; 0xcf33
 8000404:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000406:	2302      	movs	r3, #2
 8000408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800040e:	2303      	movs	r3, #3
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000412:	230c      	movs	r3, #12
 8000414:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	480e      	ldr	r0, [pc, #56]	; (8000454 <HAL_FMC_MspInit+0xb4>)
 800041c:	f000 fce4 	bl	8000de8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000424:	2302      	movs	r3, #2
 8000426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800042c:	2303      	movs	r3, #3
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000430:	2309      	movs	r3, #9
 8000432:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <HAL_FMC_MspInit+0xb8>)
 800043a:	f000 fcd5 	bl	8000de8 <HAL_GPIO_Init>
 800043e:	e000      	b.n	8000442 <HAL_FMC_MspInit+0xa2>
    return;
 8000440:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	2400002c 	.word	0x2400002c
 800044c:	58024400 	.word	0x58024400
 8000450:	58021000 	.word	0x58021000
 8000454:	58020c00 	.word	0x58020c00
 8000458:	58020800 	.word	0x58020800

0800045c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000464:	f7ff ff9c 	bl	80003a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b4d      	ldr	r3, [pc, #308]	; (80005bc <MX_GPIO_Init+0x14c>)
 8000488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800048c:	4a4b      	ldr	r2, [pc, #300]	; (80005bc <MX_GPIO_Init+0x14c>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000496:	4b49      	ldr	r3, [pc, #292]	; (80005bc <MX_GPIO_Init+0x14c>)
 8000498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	613b      	str	r3, [r7, #16]
 80004a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a4:	4b45      	ldr	r3, [pc, #276]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004aa:	4a44      	ldr	r2, [pc, #272]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b4:	4b41      	ldr	r3, [pc, #260]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004c2:	4b3e      	ldr	r3, [pc, #248]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c8:	4a3c      	ldr	r2, [pc, #240]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004ca:	f043 0310 	orr.w	r3, r3, #16
 80004ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004d2:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d8:	f003 0310 	and.w	r3, r3, #16
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b36      	ldr	r3, [pc, #216]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e6:	4a35      	ldr	r2, [pc, #212]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004f0:	4b32      	ldr	r3, [pc, #200]	; (80005bc <MX_GPIO_Init+0x14c>)
 80004f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f6:	f003 0302 	and.w	r3, r3, #2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <MX_GPIO_Init+0x14c>)
 8000500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000504:	4a2d      	ldr	r2, [pc, #180]	; (80005bc <MX_GPIO_Init+0x14c>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800050e:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <MX_GPIO_Init+0x14c>)
 8000510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000522:	4827      	ldr	r0, [pc, #156]	; (80005c0 <MX_GPIO_Init+0x150>)
 8000524:	f000 fe10 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	4825      	ldr	r0, [pc, #148]	; (80005c4 <MX_GPIO_Init+0x154>)
 8000530:	f000 fe0a 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053a:	4823      	ldr	r0, [pc, #140]	; (80005c8 <MX_GPIO_Init+0x158>)
 800053c:	f000 fe04 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4819      	ldr	r0, [pc, #100]	; (80005c0 <MX_GPIO_Init+0x150>)
 800055a:	f000 fc45 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800055e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	4813      	ldr	r0, [pc, #76]	; (80005c4 <MX_GPIO_Init+0x154>)
 8000578:	f000 fc36 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800057c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <MX_GPIO_Init+0x154>)
 8000592:	f000 fc29 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_GPIO_Init+0x158>)
 80005b0:	f000 fc1a 	bl	8000de8 <HAL_GPIO_Init>

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	58024400 	.word	0x58024400
 80005c0:	58020400 	.word	0x58020400
 80005c4:	58020c00 	.word	0x58020c00
 80005c8:	58020800 	.word	0x58020800

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fa88 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f808 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f7ff ff4a 	bl	8000470 <MX_GPIO_Init>
  MX_FMC_Init();
 80005dc:	f7ff fe7c 	bl	80002d8 <MX_FMC_Init>
  MX_SPI2_Init();
 80005e0:	f000 f8e6 	bl	80007b0 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x18>
	...

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0cc      	sub	sp, #304	; 0x130
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80005f2:	224c      	movs	r2, #76	; 0x4c
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f824 	bl	8003644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 f81d 	bl	8003644 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4618      	mov	r0, r3
 8000610:	23bc      	movs	r3, #188	; 0xbc
 8000612:	461a      	mov	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f003 f815 	bl	8003644 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800061a:	2002      	movs	r0, #2
 800061c:	f000 fdae 	bl	800117c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	4b5c      	ldr	r3, [pc, #368]	; (8000798 <SystemClock_Config+0x1b0>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	4a5b      	ldr	r2, [pc, #364]	; (8000798 <SystemClock_Config+0x1b0>)
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000632:	4b59      	ldr	r3, [pc, #356]	; (8000798 <SystemClock_Config+0x1b0>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	f003 0201 	and.w	r2, r3, #1
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <SystemClock_Config+0x1b4>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a56      	ldr	r2, [pc, #344]	; (800079c <SystemClock_Config+0x1b4>)
 8000644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b54      	ldr	r3, [pc, #336]	; (800079c <SystemClock_Config+0x1b4>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800065a:	bf00      	nop
 800065c:	4b4f      	ldr	r3, [pc, #316]	; (800079c <SystemClock_Config+0x1b4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000668:	d1f8      	bne.n	800065c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800066a:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <SystemClock_Config+0x1b8>)
 800066c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800066e:	f023 0303 	bic.w	r3, r3, #3
 8000672:	4a4b      	ldr	r2, [pc, #300]	; (80007a0 <SystemClock_Config+0x1b8>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067a:	2301      	movs	r3, #1
 800067c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 800069a:	2332      	movs	r3, #50	; 0x32
 800069c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b2:	230c      	movs	r3, #12
 80006b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fd91 	bl	80011f0 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80006d4:	f000 f868 	bl	80007a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	233f      	movs	r3, #63	; 0x3f
 80006da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ea:	2308      	movs	r3, #8
 80006ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006f6:	2340      	movs	r3, #64	; 0x40
 80006f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000700:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800070e:	2102      	movs	r1, #2
 8000710:	4618      	mov	r0, r3
 8000712:	f001 f97d 	bl	8001a10 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800071c:	f000 f844 	bl	80007a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_FMC;
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemClock_Config+0x1bc>)
 8000726:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2201      	movs	r2, #1
 800072e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2214      	movs	r2, #20
 8000736:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2204      	movs	r2, #4
 800073e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2202      	movs	r2, #2
 8000746:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2204      	movs	r2, #4
 800074e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	22c0      	movs	r2, #192	; 0xc0
 8000756:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2202      	movs	r2, #2
 800076e:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000778:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fc6e 	bl	8002060 <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 800078a:	f000 f80d 	bl	80007a8 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	58000400 	.word	0x58000400
 800079c:	58024800 	.word	0x58024800
 80007a0:	58024400 	.word	0x58024400
 80007a4:	01001000 	.word	0x01001000

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ae:	e7fe      	b.n	80007ae <Error_Handler+0x6>

080007b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_SPI2_Init+0xa8>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI2_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI2_Init+0xa4>)
 8000802:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_SPI2_Init+0xa4>)
 800080a:	2200      	movs	r2, #0
 800080c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI2_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI2_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI2_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI2_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_SPI2_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI2_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_SPI2_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI2_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_SPI2_Init+0xa4>)
 8000840:	f002 fc60 	bl	8003104 <HAL_SPI_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800084a:	f7ff ffad 	bl	80007a8 <Error_Handler>
  }

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2400007c 	.word	0x2400007c
 8000858:	40003800 	.word	0x40003800

0800085c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <HAL_SPI_MspInit+0x88>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12e      	bne.n	80008dc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <HAL_SPI_MspInit+0x8c>)
 8000880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <HAL_SPI_MspInit+0x8c>)
 8000886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_SPI_MspInit+0x8c>)
 8000890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_SPI_MspInit+0x8c>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <HAL_SPI_MspInit+0x8c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_SPI_MspInit+0x8c>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80008ba:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008cc:	2305      	movs	r3, #5
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_SPI_MspInit+0x90>)
 80008d8:	f000 fa86 	bl	8000de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40003800 	.word	0x40003800
 80008e8:	58024400 	.word	0x58024400
 80008ec:	58020400 	.word	0x58020400

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_MspInit+0x30>)
 80008f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x30>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x30>)
 8000908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	58024400 	.word	0x58024400

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f92a 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800097c:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <SystemInit+0xec>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a38      	ldr	r2, [pc, #224]	; (8000a64 <SystemInit+0xec>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800098c:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <SystemInit+0xf0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 030f 	and.w	r3, r3, #15
 8000994:	2b06      	cmp	r3, #6
 8000996:	d807      	bhi.n	80009a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <SystemInit+0xf0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f023 030f 	bic.w	r3, r3, #15
 80009a0:	4a31      	ldr	r2, [pc, #196]	; (8000a68 <SystemInit+0xf0>)
 80009a2:	f043 0307 	orr.w	r3, r3, #7
 80009a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009a8:	4b30      	ldr	r3, [pc, #192]	; (8000a6c <SystemInit+0xf4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a2f      	ldr	r2, [pc, #188]	; (8000a6c <SystemInit+0xf4>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009b4:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <SystemInit+0xf4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <SystemInit+0xf4>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	492b      	ldr	r1, [pc, #172]	; (8000a6c <SystemInit+0xf4>)
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <SystemInit+0xf8>)
 80009c2:	4013      	ands	r3, r2
 80009c4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <SystemInit+0xf0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 030f 	and.w	r3, r3, #15
 80009ce:	2b07      	cmp	r3, #7
 80009d0:	d907      	bls.n	80009e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <SystemInit+0xf0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f023 030f 	bic.w	r3, r3, #15
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <SystemInit+0xf0>)
 80009dc:	f043 0307 	orr.w	r3, r3, #7
 80009e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <SystemInit+0xf4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <SystemInit+0xf4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <SystemInit+0xf4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <SystemInit+0xf4>)
 80009f6:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <SystemInit+0xfc>)
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <SystemInit+0xf4>)
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <SystemInit+0x100>)
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <SystemInit+0xf4>)
 8000a02:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <SystemInit+0x104>)
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <SystemInit+0xf4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <SystemInit+0xf4>)
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <SystemInit+0x104>)
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <SystemInit+0xf4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <SystemInit+0xf4>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <SystemInit+0x104>)
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <SystemInit+0xf4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <SystemInit+0xf4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <SystemInit+0xf4>)
 8000a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <SystemInit+0xf4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <SystemInit+0x108>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <SystemInit+0x10c>)
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a42:	d202      	bcs.n	8000a4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <SystemInit+0x110>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <SystemInit+0x114>)
 8000a4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SystemInit+0xec>)
 8000a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	52002000 	.word	0x52002000
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a74:	02020200 	.word	0x02020200
 8000a78:	01ff0000 	.word	0x01ff0000
 8000a7c:	01010280 	.word	0x01010280
 8000a80:	5c001000 	.word	0x5c001000
 8000a84:	ffff0000 	.word	0xffff0000
 8000a88:	51008108 	.word	0x51008108
 8000a8c:	52004000 	.word	0x52004000

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a94:	f7ff ff70 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a9a:	e003      	b.n	8000aa4 <LoopCopyDataInit>

08000a9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000a9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aa2:	3104      	adds	r1, #4

08000aa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000aa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aac:	d3f6      	bcc.n	8000a9c <CopyDataInit>
  ldr  r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000ab0:	e002      	b.n	8000ab8 <LoopFillZerobss>

08000ab2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ab2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab4:	f842 3b04 	str.w	r3, [r2], #4

08000ab8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000abc:	d3f9      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f002 fd9d 	bl	80035fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fd83 	bl	80005cc <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000acc:	08003684 	.word	0x08003684
  ldr  r0, =_sdata
 8000ad0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000ad4:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000ad8:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000adc:	24000108 	.word	0x24000108

08000ae0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC3_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aea:	2003      	movs	r0, #3
 8000aec:	f000 f94a 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000af0:	f001 f944 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8000af4:	4601      	mov	r1, r0
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_Init+0x68>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	f003 030f 	and.w	r3, r3, #15
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_Init+0x6c>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	fa21 f303 	lsr.w	r3, r1, r3
 8000b0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_Init+0x68>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_Init+0x6c>)
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	fa22 f303 	lsr.w	r3, r2, r3
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_Init+0x70>)
 8000b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_Init+0x74>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f814 	bl	8000b5c <HAL_InitTick>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e002      	b.n	8000b44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3e:	f7ff fed7 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	0800366c 	.word	0x0800366c
 8000b54:	24000004 	.word	0x24000004
 8000b58:	24000000 	.word	0x24000000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_InitTick+0x60>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e021      	b.n	8000bb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_InitTick+0x64>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_InitTick+0x60>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f921 	bl	8000dce <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f8f9 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x68>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2400000c 	.word	0x2400000c
 8000bc0:	24000000 	.word	0x24000000
 8000bc4:	24000008 	.word	0x24000008

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2400000c 	.word	0x2400000c
 8000bec:	24000104 	.word	0x24000104

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	24000104 	.word	0x24000104

08000c08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetREVID+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	0c1b      	lsrs	r3, r3, #16
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	5c001000 	.word	0x5c001000

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <__NVIC_SetPriorityGrouping+0x40>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x40>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	05fa0000 	.word	0x05fa0000

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff47 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da8:	f7ff ff5e 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000dac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	f7ff ff90 	bl	8000cd8 <NVIC_EncodePriority>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff5f 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffb2 	bl	8000d40 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000df6:	4b89      	ldr	r3, [pc, #548]	; (800101c <HAL_GPIO_Init+0x234>)
 8000df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dfa:	e194      	b.n	8001126 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 8186 	beq.w	8001120 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d00b      	beq.n	8000e34 <HAL_GPIO_Init+0x4c>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d007      	beq.n	8000e34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e28:	2b11      	cmp	r3, #17
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b12      	cmp	r3, #18
 8000e32:	d130      	bne.n	8000e96 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	091b      	lsrs	r3, r3, #4
 8000e80:	f003 0201 	and.w	r2, r3, #1
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0xee>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b12      	cmp	r3, #18
 8000ed4:	d123      	bne.n	8000f1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	69b9      	ldr	r1, [r7, #24]
 8000f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0203 	and.w	r2, r3, #3
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 80e0 	beq.w	8001120 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x238>)
 8000f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <HAL_GPIO_Init+0x238>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_GPIO_Init+0x238>)
 8000f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a29      	ldr	r2, [pc, #164]	; (8001024 <HAL_GPIO_Init+0x23c>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <HAL_GPIO_Init+0x240>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d052      	beq.n	8001050 <HAL_GPIO_Init+0x268>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a1f      	ldr	r2, [pc, #124]	; (800102c <HAL_GPIO_Init+0x244>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d031      	beq.n	8001016 <HAL_GPIO_Init+0x22e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <HAL_GPIO_Init+0x248>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d02b      	beq.n	8001012 <HAL_GPIO_Init+0x22a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_GPIO_Init+0x24c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x226>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <HAL_GPIO_Init+0x250>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x222>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_GPIO_Init+0x254>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x21e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_GPIO_Init+0x258>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x21a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_GPIO_Init+0x25c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x216>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a18      	ldr	r2, [pc, #96]	; (8001048 <HAL_GPIO_Init+0x260>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x212>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_GPIO_Init+0x264>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x20e>
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	e02d      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	e02b      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	e029      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e027      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8001002:	2306      	movs	r3, #6
 8001004:	e025      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8001006:	2305      	movs	r3, #5
 8001008:	e023      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 800100a:	2304      	movs	r3, #4
 800100c:	e021      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 800100e:	2303      	movs	r3, #3
 8001010:	e01f      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8001012:	2302      	movs	r3, #2
 8001014:	e01d      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8001016:	2301      	movs	r3, #1
 8001018:	e01b      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 800101a:	bf00      	nop
 800101c:	58000080 	.word	0x58000080
 8001020:	58024400 	.word	0x58024400
 8001024:	58000400 	.word	0x58000400
 8001028:	58020000 	.word	0x58020000
 800102c:	58020400 	.word	0x58020400
 8001030:	58020800 	.word	0x58020800
 8001034:	58020c00 	.word	0x58020c00
 8001038:	58021000 	.word	0x58021000
 800103c:	58021400 	.word	0x58021400
 8001040:	58021800 	.word	0x58021800
 8001044:	58021c00 	.word	0x58021c00
 8001048:	58022000 	.word	0x58022000
 800104c:	58022400 	.word	0x58022400
 8001050:	2300      	movs	r3, #0
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001062:	4938      	ldr	r1, [pc, #224]	; (8001144 <HAL_GPIO_Init+0x35c>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80010ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3301      	adds	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f ae63 	bne.w	8000dfc <HAL_GPIO_Init+0x14>
  }
}
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	58000400 	.word	0x58000400

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001164:	e003      	b.n	800116e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_PWREx_ConfigSupply+0x70>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b04      	cmp	r3, #4
 800118e:	d00a      	beq.n	80011a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_PWREx_ConfigSupply+0x70>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d001      	beq.n	80011a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e01f      	b.n	80011e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e01d      	b.n	80011e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_PWREx_ConfigSupply+0x70>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 0207 	bic.w	r2, r3, #7
 80011ae:	490f      	ldr	r1, [pc, #60]	; (80011ec <HAL_PWREx_ConfigSupply+0x70>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011b6:	f7ff fd1b 	bl	8000bf0 <HAL_GetTick>
 80011ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011bc:	e009      	b.n	80011d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011be:	f7ff fd17 	bl	8000bf0 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011cc:	d901      	bls.n	80011d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e007      	b.n	80011e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_PWREx_ConfigSupply+0x70>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011de:	d1ee      	bne.n	80011be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	58024800 	.word	0x58024800

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e3ff      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8087 	beq.w	800131e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001210:	4b99      	ldr	r3, [pc, #612]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800121a:	4b97      	ldr	r3, [pc, #604]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	2b10      	cmp	r3, #16
 8001224:	d007      	beq.n	8001236 <HAL_RCC_OscConfig+0x46>
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	2b18      	cmp	r3, #24
 800122a:	d110      	bne.n	800124e <HAL_RCC_OscConfig+0x5e>
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b90      	ldr	r3, [pc, #576]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d06c      	beq.n	800131c <HAL_RCC_OscConfig+0x12c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d168      	bne.n	800131c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e3d9      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x76>
 8001258:	4b87      	ldr	r3, [pc, #540]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a86      	ldr	r2, [pc, #536]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e02e      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a81      	ldr	r2, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b7f      	ldr	r3, [pc, #508]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7e      	ldr	r2, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e01d      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0xbc>
 8001292:	4b79      	ldr	r3, [pc, #484]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a78      	ldr	r2, [pc, #480]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 80012ac:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc90 	bl	8000bf0 <HAL_GetTick>
 80012d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fc8c 	bl	8000bf0 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e38d      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe4>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc7c 	bl	8000bf0 <HAL_GetTick>
 80012f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fc78 	bl	8000bf0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e379      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800130e:	4b5a      	ldr	r3, [pc, #360]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x10c>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80ae 	beq.w	8001488 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132c:	4b52      	ldr	r3, [pc, #328]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001334:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001336:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <HAL_RCC_OscConfig+0x162>
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	2b18      	cmp	r3, #24
 8001346:	d13a      	bne.n	80013be <HAL_RCC_OscConfig+0x1ce>
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d135      	bne.n	80013be <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x17a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e34b      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	f7ff fc4d 	bl	8000c08 <HAL_GetREVID>
 800136e:	4602      	mov	r2, r0
 8001370:	f241 0303 	movw	r3, #4099	; 0x1003
 8001374:	429a      	cmp	r2, r3
 8001376:	d817      	bhi.n	80013a8 <HAL_RCC_OscConfig+0x1b8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b40      	cmp	r3, #64	; 0x40
 800137e:	d108      	bne.n	8001392 <HAL_RCC_OscConfig+0x1a2>
 8001380:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001388:	4a3b      	ldr	r2, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800138a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001390:	e07a      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	031b      	lsls	r3, r3, #12
 80013a0:	4935      	ldr	r1, [pc, #212]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a6:	e06f      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	4930      	ldr	r1, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013bc:	e064      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d045      	beq.n	8001452 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0219 	bic.w	r2, r3, #25
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4929      	ldr	r1, [pc, #164]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc0a 	bl	8000bf0 <HAL_GetTick>
 80013dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc06 	bl	8000bf0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e307      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	f7ff fc03 	bl	8000c08 <HAL_GetREVID>
 8001402:	4602      	mov	r2, r0
 8001404:	f241 0303 	movw	r3, #4099	; 0x1003
 8001408:	429a      	cmp	r2, r3
 800140a:	d817      	bhi.n	800143c <HAL_RCC_OscConfig+0x24c>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b40      	cmp	r3, #64	; 0x40
 8001412:	d108      	bne.n	8001426 <HAL_RCC_OscConfig+0x236>
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001422:	6053      	str	r3, [r2, #4]
 8001424:	e030      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	031b      	lsls	r3, r3, #12
 8001434:	4910      	ldr	r1, [pc, #64]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
 800143a:	e025      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	490b      	ldr	r1, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
 8001450:	e01a      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_RCC_OscConfig+0x288>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff fbc7 	bl	8000bf0 <HAL_GetTick>
 8001462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fbc3 	bl	8000bf0 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d903      	bls.n	800147c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e2c4      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
 8001478:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800147c:	4ba4      	ldr	r3, [pc, #656]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ee      	bne.n	8001466 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80a9 	beq.w	80015e8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001496:	4b9e      	ldr	r3, [pc, #632]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800149e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014a0:	4b9b      	ldr	r3, [pc, #620]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d007      	beq.n	80014bc <HAL_RCC_OscConfig+0x2cc>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b18      	cmp	r3, #24
 80014b0:	d13a      	bne.n	8001528 <HAL_RCC_OscConfig+0x338>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d135      	bne.n	8001528 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014bc:	4b94      	ldr	r3, [pc, #592]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2e4>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b80      	cmp	r3, #128	; 0x80
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e296      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014d4:	f7ff fb98 	bl	8000c08 <HAL_GetREVID>
 80014d8:	4602      	mov	r2, r0
 80014da:	f241 0303 	movw	r3, #4099	; 0x1003
 80014de:	429a      	cmp	r2, r3
 80014e0:	d817      	bhi.n	8001512 <HAL_RCC_OscConfig+0x322>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d108      	bne.n	80014fc <HAL_RCC_OscConfig+0x30c>
 80014ea:	4b89      	ldr	r3, [pc, #548]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014f2:	4a87      	ldr	r2, [pc, #540]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80014f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014fa:	e075      	b.n	80015e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014fc:	4b84      	ldr	r3, [pc, #528]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	069b      	lsls	r3, r3, #26
 800150a:	4981      	ldr	r1, [pc, #516]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001510:	e06a      	b.n	80015e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001512:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	497b      	ldr	r1, [pc, #492]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001522:	4313      	orrs	r3, r2
 8001524:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001526:	e05f      	b.n	80015e8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d042      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001530:	4b77      	ldr	r3, [pc, #476]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a76      	ldr	r2, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fb58 	bl	8000bf0 <HAL_GetTick>
 8001540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001544:	f7ff fb54 	bl	8000bf0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e255      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001556:	4b6e      	ldr	r3, [pc, #440]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001562:	f7ff fb51 	bl	8000c08 <HAL_GetREVID>
 8001566:	4602      	mov	r2, r0
 8001568:	f241 0303 	movw	r3, #4099	; 0x1003
 800156c:	429a      	cmp	r2, r3
 800156e:	d817      	bhi.n	80015a0 <HAL_RCC_OscConfig+0x3b0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	2b20      	cmp	r3, #32
 8001576:	d108      	bne.n	800158a <HAL_RCC_OscConfig+0x39a>
 8001578:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001580:	4a63      	ldr	r2, [pc, #396]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001586:	6053      	str	r3, [r2, #4]
 8001588:	e02e      	b.n	80015e8 <HAL_RCC_OscConfig+0x3f8>
 800158a:	4b61      	ldr	r3, [pc, #388]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	069b      	lsls	r3, r3, #26
 8001598:	495d      	ldr	r1, [pc, #372]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
 800159e:	e023      	b.n	80015e8 <HAL_RCC_OscConfig+0x3f8>
 80015a0:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	4958      	ldr	r1, [pc, #352]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60cb      	str	r3, [r1, #12]
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015b6:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a55      	ldr	r2, [pc, #340]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80015bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb15 	bl	8000bf0 <HAL_GetTick>
 80015c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015ca:	f7ff fb11 	bl	8000bf0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e212      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d036      	beq.n	8001662 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d019      	beq.n	8001630 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fc:	4b44      	ldr	r3, [pc, #272]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80015fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001600:	4a43      	ldr	r2, [pc, #268]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff faf2 	bl	8000bf0 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff faee 	bl	8000bf0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1ef      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x420>
 800162e:	e018      	b.n	8001662 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001630:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001634:	4a36      	ldr	r2, [pc, #216]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fad8 	bl	8000bf0 <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fad4 	bl	8000bf0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1d5      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	2b00      	cmp	r3, #0
 800166c:	d036      	beq.n	80016dc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 800167c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001680:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001682:	f7ff fab5 	bl	8000bf0 <HAL_GetTick>
 8001686:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800168a:	f7ff fab1 	bl	8000bf0 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1b2      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x49a>
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a18      	ldr	r2, [pc, #96]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80016b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa9b 	bl	8000bf0 <HAL_GetTick>
 80016ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016be:	f7ff fa97 	bl	8000bf0 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e198      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_RCC_OscConfig+0x520>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8085 	beq.w	80017f4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_RCC_OscConfig+0x524>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x524>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016f6:	f7ff fa7b 	bl	8000bf0 <HAL_GetTick>
 80016fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016fc:	e00c      	b.n	8001718 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016fe:	f7ff fa77 	bl	8000bf0 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b64      	cmp	r3, #100	; 0x64
 800170a:	d905      	bls.n	8001718 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e178      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
 8001710:	58024400 	.word	0x58024400
 8001714:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001718:	4b96      	ldr	r3, [pc, #600]	; (8001974 <HAL_RCC_OscConfig+0x784>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0ec      	beq.n	80016fe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x54a>
 800172c:	4b92      	ldr	r3, [pc, #584]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001730:	4a91      	ldr	r2, [pc, #580]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	; 0x70
 8001738:	e02d      	b.n	8001796 <HAL_RCC_OscConfig+0x5a6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x56c>
 8001742:	4b8d      	ldr	r3, [pc, #564]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a8c      	ldr	r2, [pc, #560]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	4b8a      	ldr	r3, [pc, #552]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a89      	ldr	r2, [pc, #548]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	e01c      	b.n	8001796 <HAL_RCC_OscConfig+0x5a6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x58e>
 8001764:	4b84      	ldr	r3, [pc, #528]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a83      	ldr	r2, [pc, #524]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	4b81      	ldr	r3, [pc, #516]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a80      	ldr	r2, [pc, #512]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	e00b      	b.n	8001796 <HAL_RCC_OscConfig+0x5a6>
 800177e:	4b7e      	ldr	r3, [pc, #504]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a7d      	ldr	r2, [pc, #500]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
 800178a:	4b7b      	ldr	r3, [pc, #492]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a7a      	ldr	r2, [pc, #488]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d015      	beq.n	80017ca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff fa27 	bl	8000bf0 <HAL_GetTick>
 80017a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fa23 	bl	8000bf0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e122      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017bc:	4b6e      	ldr	r3, [pc, #440]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ee      	beq.n	80017a6 <HAL_RCC_OscConfig+0x5b6>
 80017c8:	e014      	b.n	80017f4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa11 	bl	8000bf0 <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fa0d 	bl	8000bf0 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e10c      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ee      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 8101 	beq.w	8001a00 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017fe:	4b5e      	ldr	r3, [pc, #376]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001806:	2b18      	cmp	r3, #24
 8001808:	f000 80bc 	beq.w	8001984 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	2b02      	cmp	r3, #2
 8001812:	f040 8095 	bne.w	8001940 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800181c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff f9e5 	bl	8000bf0 <HAL_GetTick>
 8001826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f9e1 	bl	8000bf0 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0e2      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800183c:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800184a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <HAL_RCC_OscConfig+0x78c>)
 800184e:	4013      	ands	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	430a      	orrs	r2, r1
 800185c:	4946      	ldr	r1, [pc, #280]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800185e:	4313      	orrs	r3, r2
 8001860:	628b      	str	r3, [r1, #40]	; 0x28
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	3b01      	subs	r3, #1
 8001868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001870:	3b01      	subs	r3, #1
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	b29b      	uxth	r3, r3
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	3b01      	subs	r3, #1
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	3b01      	subs	r3, #1
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001892:	4939      	ldr	r1, [pc, #228]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001894:	4313      	orrs	r3, r2
 8001896:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	4a36      	ldr	r2, [pc, #216]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_RCC_OscConfig+0x790>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018b0:	00d2      	lsls	r2, r2, #3
 80018b2:	4931      	ldr	r1, [pc, #196]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	f023 020c 	bic.w	r2, r3, #12
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	492c      	ldr	r1, [pc, #176]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	f023 0202 	bic.w	r2, r3, #2
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4928      	ldr	r1, [pc, #160]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	4a25      	ldr	r2, [pc, #148]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 80018fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f96a 	bl	8000bf0 <HAL_GetTick>
 800191c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f966 	bl	8000bf0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e067      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x730>
 800193e:	e05f      	b.n	8001a00 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f950 	bl	8000bf0 <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f94c 	bl	8000bf0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e04d      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_RCC_OscConfig+0x788>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x764>
 8001972:	e045      	b.n	8001a00 <HAL_RCC_OscConfig+0x810>
 8001974:	58024800 	.word	0x58024800
 8001978:	58024400 	.word	0x58024400
 800197c:	fffffc0c 	.word	0xfffffc0c
 8001980:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_RCC_OscConfig+0x81c>)
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_OscConfig+0x81c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	2b01      	cmp	r3, #1
 8001996:	d031      	beq.n	80019fc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f003 0203 	and.w	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d12a      	bne.n	80019fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d122      	bne.n	80019fc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11a      	bne.n	80019fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	0a5b      	lsrs	r3, r3, #9
 80019ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d108      	bne.n	80019fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	0e1b      	lsrs	r3, r3, #24
 80019ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3730      	adds	r7, #48	; 0x30
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	58024400 	.word	0x58024400

08001a10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e19c      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b8a      	ldr	r3, [pc, #552]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d910      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b87      	ldr	r3, [pc, #540]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 020f 	bic.w	r2, r3, #15
 8001a3a:	4985      	ldr	r1, [pc, #532]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e184      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d010      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d908      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a70:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	4975      	ldr	r1, [pc, #468]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d010      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	4b70      	ldr	r3, [pc, #448]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d908      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	496a      	ldr	r1, [pc, #424]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	4b64      	ldr	r3, [pc, #400]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001acc:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	495e      	ldr	r1, [pc, #376]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d010      	beq.n	8001b0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d908      	bls.n	8001b0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001afa:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4953      	ldr	r1, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d908      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f023 020f 	bic.w	r2, r3, #15
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4947      	ldr	r1, [pc, #284]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d055      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4940      	ldr	r1, [pc, #256]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b60:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d121      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0f6      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d115      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0ea      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0de      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d6      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f023 0207 	bic.w	r2, r3, #7
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4925      	ldr	r1, [pc, #148]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f815 	bl	8000bf0 <HAL_GetTick>
 8001bc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7ff f811 	bl	8000bf0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0be      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d1eb      	bne.n	8001bca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d208      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f023 020f 	bic.w	r2, r3, #15
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d214      	bcs.n	8001c58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 020f 	bic.w	r2, r3, #15
 8001c36:	4906      	ldr	r1, [pc, #24]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_RCC_ClockConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e086      	b.n	8001d5e <HAL_RCC_ClockConfig+0x34e>
 8001c50:	52002000 	.word	0x52002000
 8001c54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d010      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d208      	bcs.n	8001c86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c74:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	4939      	ldr	r1, [pc, #228]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d010      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d208      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	492e      	ldr	r1, [pc, #184]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d208      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d010      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d208      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4917      	ldr	r1, [pc, #92]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d10:	f000 f834 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d14:	4601      	mov	r1, r0
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_RCC_ClockConfig+0x35c>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	fa21 f303 	lsr.w	r3, r1, r3
 8001d2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_RCC_ClockConfig+0x358>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_RCC_ClockConfig+0x35c>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x360>)
 8001d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x364>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x368>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ff02 	bl	8000b5c <HAL_InitTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	0800366c 	.word	0x0800366c
 8001d70:	24000004 	.word	0x24000004
 8001d74:	24000000 	.word	0x24000000
 8001d78:	24000008 	.word	0x24000008

08001d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d82:	4baf      	ldr	r3, [pc, #700]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d8a:	2b18      	cmp	r3, #24
 8001d8c:	f200 814e 	bhi.w	800202c <HAL_RCC_GetSysClockFreq+0x2b0>
 8001d90:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001dfd 	.word	0x08001dfd
 8001d9c:	0800202d 	.word	0x0800202d
 8001da0:	0800202d 	.word	0x0800202d
 8001da4:	0800202d 	.word	0x0800202d
 8001da8:	0800202d 	.word	0x0800202d
 8001dac:	0800202d 	.word	0x0800202d
 8001db0:	0800202d 	.word	0x0800202d
 8001db4:	0800202d 	.word	0x0800202d
 8001db8:	08001e23 	.word	0x08001e23
 8001dbc:	0800202d 	.word	0x0800202d
 8001dc0:	0800202d 	.word	0x0800202d
 8001dc4:	0800202d 	.word	0x0800202d
 8001dc8:	0800202d 	.word	0x0800202d
 8001dcc:	0800202d 	.word	0x0800202d
 8001dd0:	0800202d 	.word	0x0800202d
 8001dd4:	0800202d 	.word	0x0800202d
 8001dd8:	08001e29 	.word	0x08001e29
 8001ddc:	0800202d 	.word	0x0800202d
 8001de0:	0800202d 	.word	0x0800202d
 8001de4:	0800202d 	.word	0x0800202d
 8001de8:	0800202d 	.word	0x0800202d
 8001dec:	0800202d 	.word	0x0800202d
 8001df0:	0800202d 	.word	0x0800202d
 8001df4:	0800202d 	.word	0x0800202d
 8001df8:	08001e2f 	.word	0x08001e2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dfc:	4b90      	ldr	r3, [pc, #576]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e08:	4b8d      	ldr	r3, [pc, #564]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	4a8c      	ldr	r2, [pc, #560]	; (8002044 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001e1a:	e10a      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e1c:	4b89      	ldr	r3, [pc, #548]	; (8002044 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001e1e:	61bb      	str	r3, [r7, #24]
    break;
 8001e20:	e107      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001e22:	4b89      	ldr	r3, [pc, #548]	; (8002048 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001e24:	61bb      	str	r3, [r7, #24]
    break;
 8001e26:	e104      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e28:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001e2a:	61bb      	str	r3, [r7, #24]
    break;
 8001e2c:	e101      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e2e:	4b84      	ldr	r3, [pc, #528]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e38:	4b81      	ldr	r3, [pc, #516]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e44:	4b7e      	ldr	r3, [pc, #504]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e4e:	4b7c      	ldr	r3, [pc, #496]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e52:	08db      	lsrs	r3, r3, #3
 8001e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80da 	beq.w	8002026 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d05a      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x1b2>
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d302      	bcc.n	8001e82 <HAL_RCC_GetSysClockFreq+0x106>
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d078      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f6>
 8001e80:	e099      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e82:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d02d      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e8e:	4b6c      	ldr	r3, [pc, #432]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	08db      	lsrs	r3, r3, #3
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	4a6a      	ldr	r2, [pc, #424]	; (8002044 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eb8:	4b61      	ldr	r3, [pc, #388]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ec8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ecc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001ee8:	e087      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002054 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f10:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f2c:	e065      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f38:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002058 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f50:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f54:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f70:	e043      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f7c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800205c <HAL_RCC_GetSysClockFreq+0x2e0>
 8001f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f84:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f94:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f98:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fb4:	e021      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002058 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fdc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ff8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	0a5b      	lsrs	r3, r3, #9
 8002000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002004:	3301      	adds	r3, #1
 8002006:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002012:	edd7 6a07 	vldr	s13, [r7, #28]
 8002016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201e:	ee17 3a90 	vmov	r3, s15
 8002022:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002024:	e005      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
    break;
 800202a:	e002      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800202e:	61bb      	str	r3, [r7, #24]
    break;
 8002030:	bf00      	nop
  }

  return sysclockfreq;
 8002032:	69bb      	ldr	r3, [r7, #24]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3724      	adds	r7, #36	; 0x24
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	58024400 	.word	0x58024400
 8002044:	03d09000 	.word	0x03d09000
 8002048:	003d0900 	.word	0x003d0900
 800204c:	00f42400 	.word	0x00f42400
 8002050:	46000000 	.word	0x46000000
 8002054:	4c742400 	.word	0x4c742400
 8002058:	4a742400 	.word	0x4a742400
 800205c:	4b742400 	.word	0x4b742400

08002060 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002068:	2300      	movs	r3, #0
 800206a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800206c:	2300      	movs	r3, #0
 800206e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03d      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002084:	d013      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800208a:	d802      	bhi.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002090:	e01f      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002096:	d013      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800209c:	d01c      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800209e:	e018      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020a0:	4baf      	ldr	r3, [pc, #700]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	4aae      	ldr	r2, [pc, #696]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020ac:	e015      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2102      	movs	r1, #2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fec1 	bl	8002e3c <RCCEx_PLL2_Config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020be:	e00c      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3324      	adds	r3, #36	; 0x24
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ff6a 	bl	8002fa0 <RCCEx_PLL3_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020d0:	e003      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
      break;
 80020d6:	e000      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80020d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80020e0:	4b9f      	ldr	r3, [pc, #636]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ec:	499c      	ldr	r1, [pc, #624]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	650b      	str	r3, [r1, #80]	; 0x50
 80020f2:	e001      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03d      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	2b04      	cmp	r3, #4
 800210a:	d826      	bhi.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002129 	.word	0x08002129
 8002118:	08002137 	.word	0x08002137
 800211c:	08002149 	.word	0x08002149
 8002120:	08002161 	.word	0x08002161
 8002124:	08002161 	.word	0x08002161
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002128:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	4a8c      	ldr	r2, [pc, #560]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800212e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002132:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002134:	e015      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3304      	adds	r3, #4
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fe7d 	bl	8002e3c <RCCEx_PLL2_Config>
 8002142:	4603      	mov	r3, r0
 8002144:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002146:	e00c      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3324      	adds	r3, #36	; 0x24
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f000 ff26 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002158:	e003      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]
      break;
 800215e:	e000      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002168:	4b7d      	ldr	r3, [pc, #500]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800216a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216c:	f023 0207 	bic.w	r2, r3, #7
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	497a      	ldr	r1, [pc, #488]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002176:	4313      	orrs	r3, r2
 8002178:	650b      	str	r3, [r1, #80]	; 0x50
 800217a:	e001      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03e      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d01c      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002194:	2b80      	cmp	r3, #128	; 0x80
 8002196:	d804      	bhi.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	d00d      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80021a0:	e01e      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80021a2:	2bc0      	cmp	r3, #192	; 0xc0
 80021a4:	d01f      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80021a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021aa:	d01e      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80021ac:	e018      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021ae:	4b6c      	ldr	r3, [pc, #432]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	4a6b      	ldr	r2, [pc, #428]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021ba:	e017      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fe3a 	bl	8002e3c <RCCEx_PLL2_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021cc:	e00e      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3324      	adds	r3, #36	; 0x24
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fee3 	bl	8002fa0 <RCCEx_PLL3_Config>
 80021da:	4603      	mov	r3, r0
 80021dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021de:	e005      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	75fb      	strb	r3, [r7, #23]
      break;
 80021e4:	e002      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80021e6:	bf00      	nop
 80021e8:	e000      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80021ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	4958      	ldr	r1, [pc, #352]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002200:	4313      	orrs	r3, r2
 8002202:	650b      	str	r3, [r1, #80]	; 0x50
 8002204:	e001      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d044      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800221c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002220:	d01f      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002226:	d805      	bhi.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800222c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002230:	d00e      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002232:	e01f      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002234:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002238:	d01f      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800223a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800223e:	d01e      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002240:	e018      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	4a46      	ldr	r2, [pc, #280]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800224e:	e017      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fdf0 	bl	8002e3c <RCCEx_PLL2_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002260:	e00e      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3324      	adds	r3, #36	; 0x24
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fe99 	bl	8002fa0 <RCCEx_PLL3_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002272:	e005      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	75fb      	strb	r3, [r7, #23]
      break;
 8002278:	e002      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800227e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002286:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002294:	4932      	ldr	r1, [pc, #200]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002296:	4313      	orrs	r3, r2
 8002298:	658b      	str	r3, [r1, #88]	; 0x58
 800229a:	e001      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d044      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022b6:	d01f      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80022b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022bc:	d805      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80022c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c6:	d00e      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80022c8:	e01f      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80022ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022ce:	d01f      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80022d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022d4:	d01e      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80022d6:	e018      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022e4:	e017      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fda5 	bl	8002e3c <RCCEx_PLL2_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80022f6:	e00e      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3324      	adds	r3, #36	; 0x24
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fe4e 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002308:	e005      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002310:	bf00      	nop
 8002312:	e000      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800232a:	490d      	ldr	r1, [pc, #52]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800232c:	4313      	orrs	r3, r2
 800232e:	658b      	str	r3, [r1, #88]	; 0x58
 8002330:	e001      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d035      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002346:	2b10      	cmp	r3, #16
 8002348:	d00c      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800234a:	2b10      	cmp	r3, #16
 800234c:	d802      	bhi.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01b      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002352:	e017      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d00c      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002358:	2b30      	cmp	r3, #48	; 0x30
 800235a:	d018      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800235c:	e012      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800235e:	bf00      	nop
 8002360:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002364:	4baf      	ldr	r3, [pc, #700]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	4aae      	ldr	r2, [pc, #696]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800236a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002370:	e00e      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	2102      	movs	r1, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fd5f 	bl	8002e3c <RCCEx_PLL2_Config>
 800237e:	4603      	mov	r3, r0
 8002380:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002382:	e005      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	75fb      	strb	r3, [r7, #23]
      break;
 8002388:	e002      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800238a:	bf00      	nop
 800238c:	e000      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800238e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002396:	4ba3      	ldr	r3, [pc, #652]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a2:	49a0      	ldr	r1, [pc, #640]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80023a8:	e001      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d042      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c2:	d01f      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80023c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c8:	d805      	bhi.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d2:	d00e      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80023d4:	e01f      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80023d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023da:	d01f      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80023dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e0:	d01e      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80023e2:	e018      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e4:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	4a8e      	ldr	r2, [pc, #568]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80023f0:	e017      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fd1f 	bl	8002e3c <RCCEx_PLL2_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002402:	e00e      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3324      	adds	r3, #36	; 0x24
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fdc8 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002414:	e005      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
      break;
 800241a:	e002      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800241c:	bf00      	nop
 800241e:	e000      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002428:	4b7e      	ldr	r3, [pc, #504]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800242a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	497b      	ldr	r1, [pc, #492]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	650b      	str	r3, [r1, #80]	; 0x50
 800243a:	e001      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d042      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002454:	d01b      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800245a:	d805      	bhi.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d022      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002466:	e01b      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002468:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800246c:	d01d      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800246e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002472:	d01c      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002474:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002478:	d01b      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800247a:	e011      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	2101      	movs	r1, #1
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fcda 	bl	8002e3c <RCCEx_PLL2_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800248c:	e012      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3324      	adds	r3, #36	; 0x24
 8002492:	2101      	movs	r1, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fd83 	bl	8002fa0 <RCCEx_PLL3_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800249e:	e009      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	75fb      	strb	r3, [r7, #23]
      break;
 80024a4:	e006      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80024a6:	bf00      	nop
 80024a8:	e004      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80024aa:	bf00      	nop
 80024ac:	e002      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80024b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80024ba:	4b5a      	ldr	r3, [pc, #360]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	4957      	ldr	r1, [pc, #348]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	650b      	str	r3, [r1, #80]	; 0x50
 80024cc:	e001      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
 80024d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d044      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80024e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e8:	d01b      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80024ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ee:	d805      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d022      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80024f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80024fa:	e01b      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002500:	d01d      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002506:	d01c      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002508:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800250c:	d01b      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800250e:	e011      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fc90 	bl	8002e3c <RCCEx_PLL2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002520:	e012      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3324      	adds	r3, #36	; 0x24
 8002526:	2101      	movs	r1, #1
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fd39 	bl	8002fa0 <RCCEx_PLL3_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002532:	e009      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	75fb      	strb	r3, [r7, #23]
      break;
 8002538:	e006      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800253a:	bf00      	nop
 800253c:	e004      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800253e:	bf00      	nop
 8002540:	e002      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800254e:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800255c:	4931      	ldr	r1, [pc, #196]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	658b      	str	r3, [r1, #88]	; 0x58
 8002562:	e001      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d02d      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800257c:	d005      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800257e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002582:	d009      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002588:	e00f      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	4a25      	ldr	r2, [pc, #148]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002596:	e00c      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fc4c 	bl	8002e3c <RCCEx_PLL2_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80025a8:	e003      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
      break;
 80025ae:	e000      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80025b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c4:	4917      	ldr	r1, [pc, #92]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	650b      	str	r3, [r1, #80]	; 0x50
 80025ca:	e001      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d035      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d81b      	bhi.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	08002629 	.word	0x08002629
 80025f0:	080025fd 	.word	0x080025fd
 80025f4:	0800260b 	.word	0x0800260b
 80025f8:	08002629 	.word	0x08002629
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	4a08      	ldr	r2, [pc, #32]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002606:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002608:	e00f      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	2102      	movs	r1, #2
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fc13 	bl	8002e3c <RCCEx_PLL2_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800261a:	e006      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	75fb      	strb	r3, [r7, #23]
      break;
 8002620:	e003      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002622:	bf00      	nop
 8002624:	58024400 	.word	0x58024400
      break;
 8002628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002630:	4bba      	ldr	r3, [pc, #744]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002634:	f023 0203 	bic.w	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	49b7      	ldr	r1, [pc, #732]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002642:	e001      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8086 	beq.w	8002762 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002656:	4bb2      	ldr	r3, [pc, #712]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4ab1      	ldr	r2, [pc, #708]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002662:	f7fe fac5 	bl	8000bf0 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002668:	e009      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7fe fac1 	bl	8000bf0 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d902      	bls.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	75fb      	strb	r3, [r7, #23]
        break;
 800267c:	e005      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267e:	4ba8      	ldr	r3, [pc, #672]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ef      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d166      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002690:	4ba2      	ldr	r3, [pc, #648]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002692:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800269a:	4053      	eors	r3, r2
 800269c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a4:	4b9d      	ldr	r3, [pc, #628]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026ae:	4b9b      	ldr	r3, [pc, #620]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a9a      	ldr	r2, [pc, #616]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ba:	4b98      	ldr	r3, [pc, #608]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a97      	ldr	r2, [pc, #604]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80026c6:	4a95      	ldr	r2, [pc, #596]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d6:	d115      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fa8a 	bl	8000bf0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026de:	e00b      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fa86 	bl	8000bf0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d902      	bls.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	75fb      	strb	r3, [r7, #23]
            break;
 80026f6:	e005      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026f8:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ed      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d126      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002718:	d10d      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800271a:	4b80      	ldr	r3, [pc, #512]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002728:	0919      	lsrs	r1, r3, #4
 800272a:	4b7e      	ldr	r3, [pc, #504]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800272c:	400b      	ands	r3, r1
 800272e:	497b      	ldr	r1, [pc, #492]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002730:	4313      	orrs	r3, r2
 8002732:	610b      	str	r3, [r1, #16]
 8002734:	e005      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002736:	4b79      	ldr	r3, [pc, #484]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	4a78      	ldr	r2, [pc, #480]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800273c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002740:	6113      	str	r3, [r2, #16]
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002744:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	4972      	ldr	r1, [pc, #456]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	670b      	str	r3, [r1, #112]	; 0x70
 8002756:	e004      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	75bb      	strb	r3, [r7, #22]
 800275c:	e001      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d07d      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002772:	2b28      	cmp	r3, #40	; 0x28
 8002774:	d866      	bhi.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	0800284b 	.word	0x0800284b
 8002780:	08002845 	.word	0x08002845
 8002784:	08002845 	.word	0x08002845
 8002788:	08002845 	.word	0x08002845
 800278c:	08002845 	.word	0x08002845
 8002790:	08002845 	.word	0x08002845
 8002794:	08002845 	.word	0x08002845
 8002798:	08002845 	.word	0x08002845
 800279c:	08002821 	.word	0x08002821
 80027a0:	08002845 	.word	0x08002845
 80027a4:	08002845 	.word	0x08002845
 80027a8:	08002845 	.word	0x08002845
 80027ac:	08002845 	.word	0x08002845
 80027b0:	08002845 	.word	0x08002845
 80027b4:	08002845 	.word	0x08002845
 80027b8:	08002845 	.word	0x08002845
 80027bc:	08002833 	.word	0x08002833
 80027c0:	08002845 	.word	0x08002845
 80027c4:	08002845 	.word	0x08002845
 80027c8:	08002845 	.word	0x08002845
 80027cc:	08002845 	.word	0x08002845
 80027d0:	08002845 	.word	0x08002845
 80027d4:	08002845 	.word	0x08002845
 80027d8:	08002845 	.word	0x08002845
 80027dc:	0800284b 	.word	0x0800284b
 80027e0:	08002845 	.word	0x08002845
 80027e4:	08002845 	.word	0x08002845
 80027e8:	08002845 	.word	0x08002845
 80027ec:	08002845 	.word	0x08002845
 80027f0:	08002845 	.word	0x08002845
 80027f4:	08002845 	.word	0x08002845
 80027f8:	08002845 	.word	0x08002845
 80027fc:	0800284b 	.word	0x0800284b
 8002800:	08002845 	.word	0x08002845
 8002804:	08002845 	.word	0x08002845
 8002808:	08002845 	.word	0x08002845
 800280c:	08002845 	.word	0x08002845
 8002810:	08002845 	.word	0x08002845
 8002814:	08002845 	.word	0x08002845
 8002818:	08002845 	.word	0x08002845
 800281c:	0800284b 	.word	0x0800284b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	2101      	movs	r1, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fb08 	bl	8002e3c <RCCEx_PLL2_Config>
 800282c:	4603      	mov	r3, r0
 800282e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002830:	e00c      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3324      	adds	r3, #36	; 0x24
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fbb1 	bl	8002fa0 <RCCEx_PLL3_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002842:	e003      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	75fb      	strb	r3, [r7, #23]
      break;
 8002848:	e000      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800284a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002852:	4b32      	ldr	r3, [pc, #200]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285e:	492f      	ldr	r1, [pc, #188]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	654b      	str	r3, [r1, #84]	; 0x54
 8002864:	e001      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d037      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287a:	2b05      	cmp	r3, #5
 800287c:	d820      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028c7 	.word	0x080028c7
 8002888:	0800289d 	.word	0x0800289d
 800288c:	080028af 	.word	0x080028af
 8002890:	080028c7 	.word	0x080028c7
 8002894:	080028c7 	.word	0x080028c7
 8002898:	080028c7 	.word	0x080028c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 faca 	bl	8002e3c <RCCEx_PLL2_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80028ac:	e00c      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3324      	adds	r3, #36	; 0x24
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fb73 	bl	8002fa0 <RCCEx_PLL3_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80028be:	e003      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
      break;
 80028c4:	e000      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80028c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028da:	4910      	ldr	r1, [pc, #64]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	654b      	str	r3, [r1, #84]	; 0x54
 80028e0:	e001      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d040      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d827      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002953 	.word	0x08002953
 8002908:	08002929 	.word	0x08002929
 800290c:	0800293b 	.word	0x0800293b
 8002910:	08002953 	.word	0x08002953
 8002914:	08002953 	.word	0x08002953
 8002918:	08002953 	.word	0x08002953
 800291c:	58024400 	.word	0x58024400
 8002920:	58024800 	.word	0x58024800
 8002924:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	2101      	movs	r1, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fa84 	bl	8002e3c <RCCEx_PLL2_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002938:	e00c      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3324      	adds	r3, #36	; 0x24
 800293e:	2101      	movs	r1, #1
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fb2d 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800294a:	e003      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
      break;
 8002950:	e000      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800295a:	4bb2      	ldr	r3, [pc, #712]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	49ae      	ldr	r1, [pc, #696]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	658b      	str	r3, [r1, #88]	; 0x58
 800296e:	e001      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d044      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800298a:	d01b      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800298c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002990:	d805      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d022      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800299c:	e01b      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d01d      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80029a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a8:	d01c      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80029aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029ae:	d01b      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80029b0:	e011      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fa3f 	bl	8002e3c <RCCEx_PLL2_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80029c2:	e012      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	2102      	movs	r1, #2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fae8 	bl	8002fa0 <RCCEx_PLL3_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80029d4:	e009      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
      break;
 80029da:	e006      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80029dc:	bf00      	nop
 80029de:	e004      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80029e0:	bf00      	nop
 80029e2:	e002      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80029e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f0:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fe:	4989      	ldr	r1, [pc, #548]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	654b      	str	r3, [r1, #84]	; 0x54
 8002a04:	e001      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d044      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a20:	d01b      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a26:	d805      	bhi.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d022      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002a32:	e01b      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d01d      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002a3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002a3e:	d01c      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a44:	d01b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f9f4 	bl	8002e3c <RCCEx_PLL2_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002a58:	e012      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3324      	adds	r3, #36	; 0x24
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fa9d 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002a6a:	e009      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002a72:	bf00      	nop
 8002a74:	e004      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a86:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a94:	4963      	ldr	r1, [pc, #396]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	658b      	str	r3, [r1, #88]	; 0x58
 8002a9a:	e001      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d044      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab6:	d01b      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002abc:	d805      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d022      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002ac8:	e01b      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ace:	d01d      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002ad0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ad4:	d01c      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002ad6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ada:	d01b      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002adc:	e011      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f9a9 	bl	8002e3c <RCCEx_PLL2_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002aee:	e012      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3324      	adds	r3, #36	; 0x24
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fa52 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002b00:	e009      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
      break;
 8002b06:	e006      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002b08:	bf00      	nop
 8002b0a:	e004      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b2a:	493e      	ldr	r1, [pc, #248]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	658b      	str	r3, [r1, #88]	; 0x58
 8002b30:	e001      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4c:	d10a      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3324      	adds	r3, #36	; 0x24
 8002b52:	2102      	movs	r1, #2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fa23 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b72:	492c      	ldr	r1, [pc, #176]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3324      	adds	r3, #36	; 0x24
 8002b94:	2102      	movs	r1, #2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fa02 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb4:	491b      	ldr	r1, [pc, #108]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d032      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d00d      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8002bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bd6:	d016      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f92a 	bl	8002e3c <RCCEx_PLL2_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002bec:	e00c      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3324      	adds	r3, #36	; 0x24
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f9d3 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002bfe:	e003      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
      break;
 8002c04:	e000      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8002c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c1c:	4901      	ldr	r1, [pc, #4]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	658b      	str	r3, [r1, #88]	; 0x58
 8002c22:	e003      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8002c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02f      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c42:	d00c      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002c44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c48:	d015      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8002c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4e:	d10f      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c50:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	4a78      	ldr	r2, [pc, #480]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002c5c:	e00c      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3324      	adds	r3, #36	; 0x24
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f99b 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002c6e:	e003      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
      break;
 8002c74:	e000      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8002c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c7e:	4b6e      	ldr	r3, [pc, #440]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8c:	496a      	ldr	r1, [pc, #424]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	654b      	str	r3, [r1, #84]	; 0x54
 8002c92:	e001      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d029      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d007      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8002cb2:	e00f      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb4:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	4a5f      	ldr	r2, [pc, #380]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002cc0:	e00b      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f8b7 	bl	8002e3c <RCCEx_PLL2_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002cd2:	e002      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002ce0:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cec:	4952      	ldr	r1, [pc, #328]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3324      	adds	r3, #36	; 0x24
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f948 	bl	8002fa0 <RCCEx_PLL3_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02f      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2e:	d00c      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d34:	d802      	bhi.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d011      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8002d3a:	e00d      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8002d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d40:	d00f      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d46:	d00e      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002d48:	e006      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002d56:	e007      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5c:	e004      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e002      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d6e:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d7a:	492f      	ldr	r1, [pc, #188]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	654b      	str	r3, [r1, #84]	; 0x54
 8002d80:	e001      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4926      	ldr	r1, [pc, #152]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dbe:	491e      	ldr	r1, [pc, #120]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ddc:	4916      	ldr	r1, [pc, #88]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002df8:	6113      	str	r3, [r2, #16]
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	da08      	bge.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1e:	4906      	ldr	r1, [pc, #24]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002e24:	7dbb      	ldrb	r3, [r7, #22]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	58024400 	.word	0x58024400

08002e3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002e4a:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d101      	bne.n	8002e5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e099      	b.n	8002f8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002e5a:	4b4f      	ldr	r3, [pc, #316]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a4e      	ldr	r2, [pc, #312]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002e60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e66:	f7fd fec3 	bl	8000bf0 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002e6e:	f7fd febf 	bl	8000bf0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e086      	b.n	8002f8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e80:	4b45      	ldr	r3, [pc, #276]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002e8c:	4b42      	ldr	r3, [pc, #264]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	031b      	lsls	r3, r3, #12
 8002e9a:	493f      	ldr	r1, [pc, #252]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	628b      	str	r3, [r1, #40]	; 0x28
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	025b      	lsls	r3, r3, #9
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ed0:	4931      	ldr	r1, [pc, #196]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002ed6:	4b30      	ldr	r3, [pc, #192]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	492d      	ldr	r1, [pc, #180]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f023 0220 	bic.w	r2, r3, #32
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	4928      	ldr	r1, [pc, #160]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002efa:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f00:	f023 0310 	bic.w	r3, r3, #16
 8002f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <RCCEx_PLL2_Config+0x160>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	69d2      	ldr	r2, [r2, #28]
 8002f12:	00d2      	lsls	r2, r2, #3
 8002f14:	4920      	ldr	r1, [pc, #128]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f20:	f043 0310 	orr.w	r3, r3, #16
 8002f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f38:	e00f      	b.n	8002f5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d106      	bne.n	8002f4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f4c:	e005      	b.n	8002f5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f66:	f7fd fe43 	bl	8000bf0 <HAL_GetTick>
 8002f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f6c:	e008      	b.n	8002f80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002f6e:	f7fd fe3f 	bl	8000bf0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e006      	b.n	8002f8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <RCCEx_PLL2_Config+0x15c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	ffff0007 	.word	0xffff0007

08002fa0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002fae:	4b53      	ldr	r3, [pc, #332]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d101      	bne.n	8002fbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e099      	b.n	80030f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002fbe:	4b4f      	ldr	r3, [pc, #316]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a4e      	ldr	r2, [pc, #312]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fca:	f7fd fe11 	bl	8000bf0 <HAL_GetTick>
 8002fce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002fd2:	f7fd fe0d 	bl	8000bf0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e086      	b.n	80030f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002fe4:	4b45      	ldr	r3, [pc, #276]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	051b      	lsls	r3, r3, #20
 8002ffe:	493f      	ldr	r1, [pc, #252]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003000:	4313      	orrs	r3, r2
 8003002:	628b      	str	r3, [r1, #40]	; 0x28
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	3b01      	subs	r3, #1
 800300a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	3b01      	subs	r3, #1
 8003014:	025b      	lsls	r3, r3, #9
 8003016:	b29b      	uxth	r3, r3
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	3b01      	subs	r3, #1
 800302e:	061b      	lsls	r3, r3, #24
 8003030:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003034:	4931      	ldr	r1, [pc, #196]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800303a:	4b30      	ldr	r3, [pc, #192]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	492d      	ldr	r1, [pc, #180]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003048:	4313      	orrs	r3, r2
 800304a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800304c:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4928      	ldr	r1, [pc, #160]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 800306c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <RCCEx_PLL3_Config+0x160>)
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	69d2      	ldr	r2, [r2, #28]
 8003076:	00d2      	lsls	r2, r2, #3
 8003078:	4920      	ldr	r1, [pc, #128]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 8003096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800309a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800309c:	e00f      	b.n	80030be <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 80030aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80030b0:	e005      	b.n	80030be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 80030b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ca:	f7fd fd91 	bl	8000bf0 <HAL_GetTick>
 80030ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80030d0:	e008      	b.n	80030e4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80030d2:	f7fd fd8d 	bl	8000bf0 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e006      	b.n	80030f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <RCCEx_PLL3_Config+0x15c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	58024400 	.word	0x58024400
 8003100:	ffff0007 	.word	0xffff0007

08003104 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0e2      	b.n	80032e0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a70      	ldr	r2, [pc, #448]	; (80032e8 <HAL_SPI_Init+0x1e4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00f      	beq.n	800314a <HAL_SPI_Init+0x46>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6f      	ldr	r2, [pc, #444]	; (80032ec <HAL_SPI_Init+0x1e8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00a      	beq.n	800314a <HAL_SPI_Init+0x46>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a6d      	ldr	r2, [pc, #436]	; (80032f0 <HAL_SPI_Init+0x1ec>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d005      	beq.n	800314a <HAL_SPI_Init+0x46>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b0f      	cmp	r3, #15
 8003144:	d901      	bls.n	800314a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0ca      	b.n	80032e0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8d2 	bl	80032f4 <SPI_GetPacketSize>
 8003150:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a64      	ldr	r2, [pc, #400]	; (80032e8 <HAL_SPI_Init+0x1e4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00c      	beq.n	8003176 <HAL_SPI_Init+0x72>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a62      	ldr	r2, [pc, #392]	; (80032ec <HAL_SPI_Init+0x1e8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <HAL_SPI_Init+0x72>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a61      	ldr	r2, [pc, #388]	; (80032f0 <HAL_SPI_Init+0x1ec>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d002      	beq.n	8003176 <HAL_SPI_Init+0x72>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d811      	bhi.n	800319a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800317a:	4a5b      	ldr	r2, [pc, #364]	; (80032e8 <HAL_SPI_Init+0x1e4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a59      	ldr	r2, [pc, #356]	; (80032ec <HAL_SPI_Init+0x1e8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_SPI_Init+0x90>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <HAL_SPI_Init+0x1ec>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d104      	bne.n	800319e <HAL_SPI_Init+0x9a>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b10      	cmp	r3, #16
 8003198:	d901      	bls.n	800319e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0a0      	b.n	80032e0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fb52 	bl	800085c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d8:	d110      	bne.n	80031fc <HAL_SPI_Init+0xf8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e2:	d10b      	bne.n	80031fc <HAL_SPI_Init+0xf8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031fa:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	431a      	orrs	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	ea42 0103 	orr.w	r1, r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325c:	ea42 0103 	orr.w	r1, r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003286:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800329a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40013000 	.word	0x40013000
 80032ec:	40003800 	.word	0x40003800
 80032f0:	40003c00 	.word	0x40003c00

080032f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	3301      	adds	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3307      	adds	r3, #7
 8003312:	08db      	lsrs	r3, r3, #3
 8003314:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	fb02 f303 	mul.w	r3, r2, r3
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e03e      	b.n	80033c0 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7fd f880 	bl	800045c <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3308      	adds	r3, #8
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 f830 	bl	80033cc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	461a      	mov	r2, r3
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	f000 f8b8 	bl	80034ec <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6858      	ldr	r0, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	f000 f8ff 	bl	800358c <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	6892      	ldr	r2, [r2, #8]
 8003396:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6892      	ldr	r2, [r2, #8]
 80033a2:	f041 0101 	orr.w	r1, r1, #1
 80033a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80033aa:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_SRAM_Init+0x9c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <HAL_SRAM_Init+0x9c>)
 80033b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033b4:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	52004000 	.word	0x52004000

080033cc <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	f023 0101 	bic.w	r1, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d102      	bne.n	80033fc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80033f6:	2340      	movs	r3, #64	; 0x40
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e001      	b.n	8003400 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800340c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003412:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003418:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800341e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8003424:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800342a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8003430:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8003436:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800343c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <FMC_NORSRAM_Init+0x11c>)
 8003466:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003476:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800347e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	43db      	mvns	r3, r3
 800348e:	ea02 0103 	and.w	r1, r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4319      	orrs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a8:	d10c      	bne.n	80034c4 <FMC_NORSRAM_Init+0xf8>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d006      	beq.n	80034da <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	0008fb7f 	.word	0x0008fb7f

080034ec <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003502:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	431a      	orrs	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	431a      	orrs	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	3b01      	subs	r3, #1
 8003528:	051b      	lsls	r3, r3, #20
 800352a:	431a      	orrs	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	3b02      	subs	r3, #2
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	431a      	orrs	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	3201      	adds	r2, #1
 8003540:	4319      	orrs	r1, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003554:	d113      	bne.n	800357e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800355e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	3b01      	subs	r3, #1
 8003566:	051b      	lsls	r3, r3, #20
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a0:	d11d      	bne.n	80035de <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	6811      	ldr	r1, [r2, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	6852      	ldr	r2, [r2, #4]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	4311      	orrs	r1, r2
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	0212      	lsls	r2, r2, #8
 80035c0:	4311      	orrs	r1, r2
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	6992      	ldr	r2, [r2, #24]
 80035c6:	4311      	orrs	r1, r2
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	68d2      	ldr	r2, [r2, #12]
 80035cc:	0412      	lsls	r2, r2, #16
 80035ce:	430a      	orrs	r2, r1
 80035d0:	ea43 0102 	orr.w	r1, r3, r2
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035dc:	e005      	b.n	80035ea <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80035e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	cff00000 	.word	0xcff00000

080035fc <__libc_init_array>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4e0d      	ldr	r6, [pc, #52]	; (8003634 <__libc_init_array+0x38>)
 8003600:	4c0d      	ldr	r4, [pc, #52]	; (8003638 <__libc_init_array+0x3c>)
 8003602:	1ba4      	subs	r4, r4, r6
 8003604:	10a4      	asrs	r4, r4, #2
 8003606:	2500      	movs	r5, #0
 8003608:	42a5      	cmp	r5, r4
 800360a:	d109      	bne.n	8003620 <__libc_init_array+0x24>
 800360c:	4e0b      	ldr	r6, [pc, #44]	; (800363c <__libc_init_array+0x40>)
 800360e:	4c0c      	ldr	r4, [pc, #48]	; (8003640 <__libc_init_array+0x44>)
 8003610:	f000 f820 	bl	8003654 <_init>
 8003614:	1ba4      	subs	r4, r4, r6
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	2500      	movs	r5, #0
 800361a:	42a5      	cmp	r5, r4
 800361c:	d105      	bne.n	800362a <__libc_init_array+0x2e>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003624:	4798      	blx	r3
 8003626:	3501      	adds	r5, #1
 8003628:	e7ee      	b.n	8003608 <__libc_init_array+0xc>
 800362a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800362e:	4798      	blx	r3
 8003630:	3501      	adds	r5, #1
 8003632:	e7f2      	b.n	800361a <__libc_init_array+0x1e>
 8003634:	0800367c 	.word	0x0800367c
 8003638:	0800367c 	.word	0x0800367c
 800363c:	0800367c 	.word	0x0800367c
 8003640:	08003680 	.word	0x08003680

08003644 <memset>:
 8003644:	4402      	add	r2, r0
 8003646:	4603      	mov	r3, r0
 8003648:	4293      	cmp	r3, r2
 800364a:	d100      	bne.n	800364e <memset+0xa>
 800364c:	4770      	bx	lr
 800364e:	f803 1b01 	strb.w	r1, [r3], #1
 8003652:	e7f9      	b.n	8003648 <memset+0x4>

08003654 <_init>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr

08003660 <_fini>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	bf00      	nop
 8003664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003666:	bc08      	pop	{r3}
 8003668:	469e      	mov	lr, r3
 800366a:	4770      	bx	lr
